
// set the max number
let y = prompt("請輸入賓果最大數值");
let gameNumber = parseInt(y);
// array with generated numbers;
let resultsArray = [];
// function to draw numbers and place them as a divs in DOM;
let x = prompt("目前累計獎金");
let money = parseInt(x);


function lotteryNumbers() {
  // check length of result array;
  if (resultsArray.length === gameNumber) {
    // if it's equal to gameTimes, then stop function;
    return;
  }
  // draw lottery numbers between 1 and gameNumber;
  let drawResult = Math.floor(Math.random() * gameNumber + 1);
  // check if drawResult exist in resultsArray. For first run the array is empty;
  for (let i = 0; i < resultsArray.length; i++) {
    if (drawResult === resultsArray[i]) {
      return lotteryNumbers;
    }
  }
  // create div element with class = balls and generated number as a text;
  let number = document.createElement("p");
  number.classList.add("balls");
  number.innerText = drawResult;
  // put lottery number into resultsArray;
  resultsArray.push(drawResult);

  // place div with lottery number in right place in body;
  const numbersContainer = document.getElementById("container");

  numbersContainer.appendChild(number);

  numbersContainer.addEventListener("animationend", function(){
    number.style.display = "none";
  })

  //set animation appear after animation
  setTimeout(() => {
    
  // create the numberlist on left
  let numberBox = document.createElement("div");
  numberBox.classList.add("ballBox");
  numberBox.innerText = drawResult;

  const ballBoxShell = document.getElementById("numberbox");
  ballBoxShell.appendChild(numberBox);
  
  }, 1500);
  
}

function bonus(){
  let moneybox = document.createElement("p");
  moneybox.classList.add("finalMoney");
  moneybox.innerText = money;

  const moneyContainer = document.getElementById("mmoney");

  moneyContainer.appendChild(moneybox);
}

console.log(bonus);


// hide modal function;
function hideModal(el) {
  el.style.display = "none";
}

// show the modal if the lottery not finished;
function modalActive() {
  // the modal element;
  const modal = document.getElementById("modal");
  // modal button to hide it;
  const modalBtn = document.getElementById("modal-btn");
  // show modal;
  modal.style.display = "block";
  // listen for click on modal btn to hide modal;
  modalBtn.addEventListener("click", function () {
    hideModal(modal);
  });
  // listen for click arround modal to hide it;
  window.addEventListener("click", function (ev) {
    if (ev.target === modal) {
      hideModal(modal);
    }
  });
}

// function to reset container for numbers if the lottery has been finished (6 numbers drawed) if not then show message to finish lottery;
function resetContainer() {
  if (resultsArray.length < 1) {
    // call function to show modal;
    modalActive();
  } else {
    const container = document.getElementById("container");
    container.innerHTML = "";
    const numberBox = document.getElementById("numberbox");
    numberBox.innerHTML = "";
    resultsArray = [];
    //        clickListener();
  }  
}

// reset container when Reset Numbers button has been clicked;
let resetBtn = document.getElementById("reset-numbers");
resetBtn.addEventListener("click", resetContainer);

// start listening when DOM loaded;
function clickListener() {
  // generate random numbers when Generate button has been clicked;
  let generateBtn = document.getElementById("draw-number");
  generateBtn.addEventListener("click", lotteryNumbers);
}
// call function to listen for click on Generate button when DOM loaded;
document.addEventListener("DOMContentLoaded", clickListener);

//set canvas
const canvas = document.querySelector("canvas");

const ctx = canvas.getContext("2d");

const width = canvas.width = canvas. clientWidth*window.devicePixelRatio;

const height = canvas.height = canvas. clientHeight*window.devicePixelRatio;;

function random(min, max){
  let num = Math.floor(Math.random() * (max-min)) + min;
  return num;
}

function Ball(){
  this.x = random(0,width);
  this.y = random(0,height);
  this.velX = random(-10, 10);
  this.velY = random(-10, 10);
  this.color = "rgba(10, 37, 37, .6)";
  this.size = 25;
}

Ball.prototype.draw = function() {
  ctx.beginPath();
  ctx.fillStyle = this.color;
  ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);
  ctx.fill();
}

let testBall = new Ball();

Ball.prototype.update = function() {
  if((this.x + this.size) >= width) {
    this.velX = -(this.velX);
  }

  if((this.x - this.size) <= 0) {
    this.velX = -(this.velX);
  }

  if((this.y + this.size) >= height) {
    this.velY = -(this.velY);
  }

  if((this.y - this.size) <= 0) {
    this.velY = -(this.velY);
  }

  this.x += this.velX;
  this.y += this.velY;
}

let balls = [];

function loop() {
  ctx.fillStyle = 'rgba(25,110,32,1)';
  ctx.fillRect(0,0,width,height);

  while(balls.length < 75) {
    var ball = new Ball();
    balls.push(ball);
  }

  for(i = 0; i < balls.length; i++) {
    balls[i].draw();
    balls[i].update();
  }

  requestAnimationFrame(loop);
}

loop();

Ball.prototype.collisionDetect = function() {
  for(j = 0; j < balls.length; j++) {
    if( (!(this.x === balls[j].x && this.y === balls[j].y && this.velX === balls[j].velX && this.velY === balls[j].velY)) ) {
      var dx = this.x - balls[j].x;
      var dy = this.y - balls[j].y;
      var distance = Math.sqrt(dx * dx + dy * dy);

      if (distance < this.size + balls[j].size) {
        balls[j].color = this.color = 'rgb(' + 0 + ',' + 0 + ',' + 0 +')';
      }
    }
  }
}

<!DOCTYPE html>
<html lang="en">
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Prompt:wght@700&display=swap" rel="stylesheet">
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
    />
    <title>BINGO GAME</title>
    <link rel="stylesheet" href="./style.css" type="text/css" />
  </head>

  <body>
    <main class="flexbox">
      <span class="titles">
        <h1>加碼</h1>
        <h1>久林大樂透</h1>
        <h3>最先獲得4條連線者獲勝，祝各位中大獎!!</h3>
        <button onclick="bonus()" class="money">How much money</button>
      <div id="mmoney" class="moneybox"></div>
      </span>
      <div class="scroll-logo">
        <p class="scroll-text">KURIM</p>
        <canvas id="my-canvas" style="width:600px; height:600px;"></canvas>
      </div>
      <span class="button">
      <button id="draw-number" class="draw-btn" type="button"  alt="START"></button>
      <button id="reset-numbers" class="reset-btn" type="reset">CLEAN</button>
     </span>
      <section id="container" class="container-balls"></section>
      <section id="numberbox" class="numberboxcontainer"></section>
    </main>
    <div id="modal" class="modal">
      <div>
        <h3>Lottery not finished yet!</h3>
        <p>Draw all of the one numbers and then reset.</p>
        <button id="modal-btn" type="button" class="modal-btn">OK</button>
      </div>
    </div>

    <!--    main javaScript file-->
    <script src="./app.js" type="text/javascript"></script>
  </body>
</html>

* {
  margin: 0;
  padding: 0;
  font-family: "Prompt", serif;
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
}

body {
  position: relative;
  background-image: url(./JN8sdo.webp);
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  height: 101vh;
}

/* main title*/

.flexbox {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  text-align: center;
  
}

.titles {
  position: absolute;
  padding: 1rem;
  color: rgb(0, 0, 0);
  top: 3rem;
  background-color: rgba(255, 255, 255, 0.4);
  border-radius: 5px;
  box-shadow: 1rem 1rem 10px rgba(10, 41, 25, 0.4);
  right : 50px;
  align-items: center;
  display: flex;
  flex-direction: column;
  
}

h1 { 
  margin: -2rem;
  font-size: 7rem;
  letter-spacing: 0.5rem;
}

h3 {
  margin: 0.5rem;
  font-size: 2rem;
  font-weight: 1500;
}

.money{
  position: absolute;
  display: flex;
  font-size: 3rem;
  margin: 2rem;
  padding: 1rem;
  border-radius: 5px;
  background-color: rgba(255, 255, 255, 0.5);
}

.moneybox {
  position: absolute;
  width: 10vh;
  height: 5vh;
  display: flex;
  right: 10px;
}

.scroll-logo {
  position: absolute;
  display:flex;
  align-items: center;
  justify-content: center;
}

.scroll-text{
  color: rgba(255, 255, 255, .7);
  position:absolute;
  display:flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  font-size: 15rem;
  font-weight: 700;
  letter-spacing: 10px;
}

.scroll-text::after {
  content:"";
  width: 560px;
  height: 560px;
  border: 11px solid rgba(255,255,255,0.1);
  filter:blur(5px);
  box-shadow: 0rem 0rem 20px rgba(255, 255, 255, 0.5);
  border-radius: 50%;
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

canvas {
  position:absolute;
  display: block;
  border-radius: 50%;
  color: white;
  animation:scrolled 2s linear infinite;
  z-index: -1;
  box-shadow: 1rem 1rem 10px rgba(10, 41, 25, 0.4);
}

/* buttons to start lottery*/

.button{
  position: absolute;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.draw-btn {
  width:calc(10rem + 10px);
  height:calc(10rem + 10px);
  border: none;
  border-radius: 50%;
  transition: .2s ease-in-out;
  font-size: 2.5rem;
  font-weight: 700;
  background-image: linear-gradient(90deg, #00C0FF 0%, #FFCF00 49%, #FC4F4F 80%, #00C0FF 100%);
  display:flex;
  align-items:center;
  justify-content:center;
  text-transform:uppercase;
  color:#191919; 
  animation:slidebg 2s ease-in-out infinite alternate;
  margin-top: 30rem;
}

.draw-btn::after{
  content: attr(alt);
  width: 10rem;
  height: 10rem;
  background-color: rgb(255, 255, 255) ;
  display:flex;
  align-items:center;
  justify-content:center;
  border-radius: 50%;
}

.draw-btn:hover {
  cursor: pointer;
  box-shadow: 0 0 4rem white;
  transform: scale(1.1);
  animation: none;
  color:rgb(255, 0, 0);
}

.draw-btn:active{
  transform: translateY(1px);
  box-shadow: 0 0 4rem rgb(70, 67, 67);
  color:#191919;
}

.reset-btn {
  position: fixed;
  background-color: rgb(255, 255, 255);
  width: 15vh;
  height: 6vh;
  margin: 10px;
  top: 620px;
  border-radius: 5px;
  font-size: 1.5rem;
  font-weight: 700;
  color: rgb(8, 255, 140);
  border: none;
  transition: .3s ease-in-out;
}

.reset-btn:hover {
  cursor: pointer;
  background-color: rgb(170, 13, 13);
  transform: scale(1.1);
  color: white;
  font-size: 1.75rem;
}

/* container for balls*/

.container-balls {
  position: absolute;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  top: 30rem;
}

/* element div with random numbers*/

.balls {
  display: flex;
  position: absolute;
  width: 7rem;
  height: 7rem;
  padding: 0.5rem;
  margin: 1rem;
  border-radius: 50%;
  font-size: 5rem;
  font-weight: bold;
  background: linear-gradient(to right bottom, rgba(30, 255, 124),rgba(14, 150, 75),rgba(11, 131, 65),rgb(4, 92, 44),  rgba(1, 37, 17));
  box-shadow: 5px 5px 1rem rgba(10, 41, 25, 0.4);
  color: rgba(255, 255, 255);
  animation:appear 1.5s ease-in-out; 
  opacity: 0;
  top: 1rem;
  text-align: center;
  justify-content: center;
  align-items: center;
}

.numberboxcontainer{
  position: absolute;
  width: 50vh;
  height: 97vh;
  padding: 10px;
  margin: 1rem 0;
  background-color: rgba(255, 255, 255, 0.384);
  left: 10px;
  border-radius: 10px;
  box-shadow: 5px 5px 1rem rgba(10, 41, 25, 0.4);
}

.ballBox {
  display: inline-block;
  width: 7rem;
  height: 7rem;
  padding: 0.5rem;
  margin: 0.5rem;
  border-radius: 50%;
  font-size: 4rem;
  font-weight: bold;
  background: linear-gradient(to right bottom, rgba(30, 255, 124),rgba(14, 150, 75),rgba(11, 131, 65),rgba(4, 92, 44),  rgba(1, 37, 17));
  box-shadow: 5px 5px 1rem rgba(10, 41, 25, 0.4);
  color: rgba(255, 255, 255);
  animation:appearball 1s ease-in-out; 
}
/* modal elements with button to hide it*/

.modal {
  position: absolute;
  top: 0;
  left: 0;
  height: 100vh;
  width: 100%;
  background: radial-gradient(rgba(0, 0, 0, 0.4), rgba(200, 0, 0, 0.2) 90%);
  text-align: center;
  z-index: 100;
  /*    hide the modal*/
  display: none;
}

.modal div {
  width: 80%;
  margin: 25% auto 0 auto;
  border-top: 0.2rem solid #000;
  border-bottom: 0.2rem solid #fff;
  border-radius: 5rem;
  background-color: rgba(0, 0, 0, 0.7);
  transition: 0.5s;
}

.modal div:hover {
  transform: scale(1.1);
}

.modal h3 {
  margin: 3rem;
  color: rgba(255, 0, 0, 0.7);
  letter-spacing: 0.5rem;
  font-size: 2.5rem;
}

.modal p {
  font-size: 2rem;
  color: rgba(255, 0, 0, 0.7);
  letter-spacing: 0.1rem;
}

.modal-btn {
  width: 10rem;
  padding: 1rem;
  margin: 1rem;
  border: none;
  border-radius: 0.5rem;
  background-color: rgba(255, 50, 0, 0.4);
  font-weight: bold;
  font-size: 2rem;
  color: rgba(0, 0, 0, 0.8);
  transition: 0.5s;
}

.modal-btn:hover {
  cursor: pointer;
  background-color: rgba(255, 0, 0, 0.8);
}

@keyframes slidebg {
  to {
    background-position:20vh;
  }
}

@keyframes appear {
  0%{
    transform: rotate(0) scale(0);
  }
  50%{
    opacity: 100;
    transform:rotate(360deg) scale(10);
  }
  75% {
    opacity: 100;
    transform:rotate(360deg) scale(10);
  }
  100%{
    transform:scale(1);
  }
}

@keyframes appearball {
  0%{
    opacity: 0;
    transform:cale(0);
  }
  50%{
    opacity: 1;
    transform:scale(2);
  }
  75% {
    transform:scale(2);
  }
  100%{
    transform:scale(1);
  }
}

@keyframes scrolled {
  100% {
    transform: rotate(360deg);
  }
}


